-- There are multiple ways to load an image file.
-- Note however that, for the "Runtime Asset Swap" feature, it's necessary to provide the raw data as-is.
--   * Load it via our resource system:
--     * Path needs to be mounted (archive file, zip file, loose file)
--     * Included as "custom resource"
--     * Download using http, to a specific path available to the resource system
--   * Pass the payload directly to the rive.riv_swap_asset() function

local URL = "https://defold.com/images/logo/defold/logo_with_text/logo-ver-classic-white-160.png"

-- path to your dlc files. For simplicity, this is at the root of the project
local DLC_FILES = "."


local RIVE_MODEL = "go_rive#rivemodel"

local function swap_assets(self)
	local rivc = go.get(RIVE_MODEL, "rive_file")
	rive.riv_swap_asset(rivc, "eve.png", { path = "/main/outofband/walle/eve.png" })
	-- no idea why they named it jpg
	rive.riv_swap_asset(rivc, "walle.jpg", { path = "/main/outofband/walle/walle.png" })
end


function init(self)
	local mount_name = "files"
	local mount_found = false
	for _,mount in pairs(liveupdate.get_mounts()) do
		if mount.name == mount_name then
			mount_found = true
		end
	end

	if mount_found then
		swap_assets(self)
	else
		liveupdate.add_mount(mount_name, DLC_FILES, 10, function ()
			print("LU: mounted file provider!")
			swap_assets(self)

			-- Note that there is also the option to save the file to a specific path
			-- If no path is specified, it will be stored in the http cache
			timer.delay(1.0, false, function()
				print("HTTP REQUEST", URL)
				http.request(URL, "GET", function (self, _id, response)
					print("  response.status:", response.status)
					if response.status == 200 or response.status == 206 or response.status == 304 then
						local rivc = go.get(RIVE_MODEL, "rive_file")
						rive.riv_swap_asset(rivc, "walle.jpg", { payload = response.response })
					end
					end)
				end)
		end)
	end
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
