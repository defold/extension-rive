
local URL = "https://github.com/defold/extension-rive/raw/refs/heads/main/assets/rive/marty_v2.riv"

local function create_resource(self, path, file_data)
	local hash, error = rive.create_riv_from_memory(path, file_data)
	if hash == nil then
		print("Failed to create resource", path)
		return nil
	end
	return hash
end

-- local function create_thumb(self, image_data)
-- 	local thumb, errThumb = rive.databind.create_view_model_instance_runtime(self.rive_url, "ThumbVM")
-- 	if thumb == nil then
-- 		print("Failed to create view model instance:", errThumb)
-- 		return
-- 	end
-- 	table.insert(self.thumbs, thumb)

-- 	rive.databind.set_properties(self.rive_url, thumb, {Border = 10, Image = image_data})
-- 	-- add the thumb last in the list
-- 	rive.databind.list_add_instance(self.rive_url, self.modelViewInstanceRuntime, self.list_path, thumb)

-- 	-- update borders
-- 	set_selected_thumb(self, #self.thumbs - 1)
-- end

local function download_riv_file(self, path, image_url, callback)
	http.request(image_url, "GET", function (self, _id, response)
			if response.status == 200 or response.status == 206 or response.status == 304 then
				print("downloaded", response.url, "length:", #response.response)
				local hash = create_resource(self, path, response.response)
				callback(path)
			elseif response.status == 302 then
				-- redirect
				download_riv_file(self, path, response.headers.location, callback)
			end
		end)
end

-- local function request_thumb(self, url)
-- 	print("Requesting new thumb")
-- 	download_image(self.modelViewInstanceRuntime, url)
-- end

-- local function remove_thumb(self, index)
-- 	print("Removing thumb at index", index)
-- 	local thumb = table.remove(self.thumbs, index)
-- 	rive.databind.list_remove_instance(self.rive_url, self.modelViewInstanceRuntime, self.list_path, thumb)
-- 	set_selected_thumb(self, index-1)
-- end

local function load_artboard_file(path)
	local data, error = sys.load_resource(path)
	if data then
	  print("Success", data)
	else
	  print(error)
	end
end

local function attachCharacter(self)
	rive.databind.set_properties()
end

-- Rive events trigger when the splash intro starts and ends and is used to not allow input while the intro is playing.
-- The logic is done within the rive statemachine.
local function rive_event_handler(self, messagse_id, message)
	print("received event", message.name)
end

-- Get input focus then start the splash statemachine.
function init(self)
	msg.post(".", "acquire_input_focus") 

	self.rive_url = msg.url("#swap_character_main")
	--self.main_artboard = rive.get_artboard(self.rive_url, "")
	-- self.main_file = rive.get_file(self.rive_url)

	-- print("MAWE main_file:", self.main_file)

	-- local f = rive.get_file(self.rive_url)
	-- pprint("MAWE f:", f)

	-- print("MAWE FILE PATH:", f:get_path())

	-- print("MAWE main_artboard:", self.main_artboard)

	-- self.main_artboard = self.main_file:get_artboard()
	-- print("MAWE main_artboard:", self.main_artboard)

	-- --self.modelViewInstanceRuntime = rive.databind.get_view_model_instance_runtime(self.rive_url)
	self.viewModelInstance = rive.get_viewmodel(self.rive_url)
	print("MAWE ViewModel:", self.viewModelInstance)

	self.viewModelInstanceArtboardProp = self.viewModelInstance:get_property("Artboard property")
	print("MAWE ViewModelProp:", self.viewModelInstanceArtboardProp)


	self.character_artboard = nil
	self.character_riv_hash = nil
	download_riv_file(self, "/unique/name/for/marty.rivc", URL, function (path_hash)
			self.character_riv_hash = path_hash
			self.character_file = rive.get_file(path_hash)
			print("MAWE character_file:", self.character_file)
			-- -- self.character_artboard = self.character_file:get_artboard("New Artboard")
			self.character_artboard = self.character_file:get_artboard()
			print("MAWE character_artboard:", self.character_artboard)
		end)

end

function final(self)
	print("FINAL")
	self.character_file = nil
	self.viewModelInstance = nil
	self.viewModelInstanceArtboardProp = nil
	print("FINAL END")
end

-- Enable rive input for the model.
function on_input(self, action_id, action)
	-- if action_id == hash("left") or action_id == hash("right") or action_id == hash("up") or action_id == hash("down") then
	-- 	if action.pressed and action_id == hash("left") then
	-- 		move_left(self)
	-- 	elseif action.pressed and action_id == hash("right") then
	-- 		move_right(self)
	-- 	elseif action.pressed and action_id == hash("up") then
	-- 		request_thumb(self, URL)
	-- 	elseif action.pressed and action_id == hash("down") then
	-- 		remove_thumb(self, self.thumb_index+1)
	-- 	end
	-- 	return true
	-- end
end
