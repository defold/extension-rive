diff --git a/build/rive_build_config.lua b/build/rive_build_config.lua
index d4336ed9..5c3c382f 100644
--- a/build/rive_build_config.lua
+++ b/build/rive_build_config.lua
@@ -145,6 +145,13 @@ if _OPTIONS['with_optick'] then
     RIVE_OPTICK_VERSION = '1.4.0.0'
 end 
 
+-- Optional sysroot for cross builds (primarily Linux)
+newoption({
+    trigger = 'sysroot',
+    value = 'PATH',
+    description = 'Path to a sysroot for cross-compiling (adds --sysroot=PATH to compile and link options)',
+})
+
 location(RIVE_BUILD_OUT)
 targetdir(RIVE_BUILD_OUT)
 objdir(RIVE_BUILD_OUT .. '/obj')
@@ -411,7 +418,7 @@ if _OPTIONS['for_android'] then
 
     -- Detect the NDK.
     local EXPECTED_NDK_VERSION = 'r27c'
-    local NDK_LONG_VERSION_STRING = "27.2.12479018"
+    local NDK_LONG_VERSION_STRING = "25.2.9519653"
     if _OPTIONS['for_unreal'] then
         EXPECTED_NDK_VERSION = '25.1.8937393'
         NDK_LONG_VERSION_STRING = '25.1.8937393'
@@ -548,6 +555,31 @@ end
 
 filter({})
 
+-- Cross-compilation helpers for Linux. When targeting a Linux architecture that does not match
+-- the host, add an explicit target triple so clang uses the correct backend. Optionally honor a
+-- provided --sysroot for both compilation and linking.
+if os.target() == 'linux' then
+    local host_arch = os.outputof('uname -m') or ''
+
+    -- Apply target triple if host arch doesn't match requested arch
+    if _OPTIONS['arch'] == 'x64' and host_arch ~= 'x86_64' then
+        buildoptions({ '--target=x86_64-linux-gnu' })
+        linkoptions({ '--target=x86_64-linux-gnu' })
+    elseif _OPTIONS['arch'] == 'arm64' and host_arch ~= 'aarch64' then
+        buildoptions({ '--target=aarch64-linux-gnu' })
+        linkoptions({ '--target=aarch64-linux-gnu' })
+    elseif _OPTIONS['arch'] == 'arm' and not host_arch:match('arm') then
+        buildoptions({ '--target=arm-linux-gnueabihf' })
+        linkoptions({ '--target=arm-linux-gnueabihf' })
+    end
+
+    -- Optional sysroot
+    if _OPTIONS['sysroot'] ~= nil then
+        buildoptions({ '--sysroot=' .. _OPTIONS['sysroot'] })
+        linkoptions({ '--sysroot=' .. _OPTIONS['sysroot'] })
+    end
+end
+
 filter('system:macosx')
 do
     defines({ 'RIVE_MACOSX' })
diff --git a/renderer/premake5.lua b/renderer/premake5.lua
index 255c6d97..458e841a 100644
--- a/renderer/premake5.lua
+++ b/renderer/premake5.lua
@@ -5,11 +5,11 @@ dofile(RIVE_RUNTIME_DIR .. '/premake5_v2.lua')
 dofile(RIVE_RUNTIME_DIR .. '/decoders/premake5_v2.lua')
 
 newoption({ trigger = 'with-skia', description = 'use skia' })
-if _OPTIONS['with-skia'] then
+if _OPTIONS['with-skia'] and not _OPTIONS['with-libs-only'] then
     dofile(RIVE_RUNTIME_DIR .. '/skia/renderer/premake5_v2.lua')
 end
 
-if not _OPTIONS['with-webgpu'] then
+if not _OPTIONS['with-webgpu'] and not _OPTIONS['with-libs-only'] then
     project('path_fiddle')
     do
         dependson('rive')
@@ -183,7 +183,7 @@ if not _OPTIONS['with-webgpu'] then
     end
 end
 
-if _OPTIONS['with-webgpu'] or _OPTIONS['with-dawn'] then
+if (_OPTIONS['with-webgpu'] or _OPTIONS['with-dawn']) and not _OPTIONS['with-libs-only']  then
     project('webgpu_player')
     do
         kind('ConsoleApp')
diff --git a/renderer/premake5_pls_renderer.lua b/renderer/premake5_pls_renderer.lua
index 77786666..573906eb 100644
--- a/renderer/premake5_pls_renderer.lua
+++ b/renderer/premake5_pls_renderer.lua
@@ -68,6 +68,11 @@ do
     defines({ 'RIVE_WEBGPU=' .. _OPTIONS['webgpu-version'] })
 end
 
+newoption({
+    trigger = 'with-libs-only',
+    description = 'only builds the libraries',
+})
+
 filter({})
 
 newoption({
