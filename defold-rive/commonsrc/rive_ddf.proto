syntax = "proto2";
package dmRiveDDF;

import "ddf/ddf_extensions.proto";
import "ddf/ddf_math.proto";

option java_package = "com.dynamo.rive.proto";
option java_outer_classname = "Rive";

message RiveSceneDesc
{
    required string scene = 1 [(resource)=true];
    optional string atlas = 2 [(resource)=true];
}

message RiveModelDesc
{
    enum BlendMode
    {
        BLEND_MODE_ALPHA     = 0 [(displayName) = "Alpha"];
        BLEND_MODE_ADD       = 1 [(displayName) = "Add"];
        BLEND_MODE_MULT      = 3 [(displayName) = "Multiply"];
        BLEND_MODE_SCREEN    = 4 [(displayName) = "Screen"];
    }

    // Matches rive::Fit (see layout.hpp)
    enum Fit
    {
        FIT_FILL        = 0 [(displayName) = "Fill"];
        FIT_CONTAIN     = 1 [(displayName) = "Contain"];
        FIT_COVER       = 2 [(displayName) = "Cover"];
        FIT_FIT_WIDTH   = 3 [(displayName) = "Fit Width"];
        FIT_FIT_HEIGHT  = 4 [(displayName) = "Fit Height"];
        FIT_NONE        = 5 [(displayName) = "None"];
        FIT_SCALE_DOWN  = 6 [(displayName) = "ScaleDown"];
        FIT_LAYOUT      = 7 [(displayName) = "Layout"];
    }

    // Matches rive::Alignment (see layout.hpp)
    enum Alignment
    {
        ALIGNMENT_TOP_LEFT      = 0 [(displayName) = "Top Left"];
        ALIGNMENT_TOP_CENTER    = 1 [(displayName) = "Top Center"];
        ALIGNMENT_TOP_RIGHT     = 2 [(displayName) = "Top Right"];
        ALIGNMENT_CENTER_LEFT   = 3 [(displayName) = "Center Left"];
        ALIGNMENT_CENTER        = 4 [(displayName) = "Center"];
        ALIGNMENT_CENTER_RIGHT  = 5 [(displayName) = "Center Right"];
        ALIGNMENT_BOTTOM_LEFT   = 6 [(displayName) = "Bottom Left"];
        ALIGNMENT_BOTTOM_CENTER = 7 [(displayName) = "Bottom Center"];
        ALIGNMENT_BOTTOM_RIGHT  = 8 [(displayName) = "Bottom Right"];
    }

    enum CoordinateSystem
    {
        COORDINATE_SYSTEM_FULLSCREEN = 0 [(displayName) = "Fullscreen"];
        COORDINATE_SYSTEM_RIVE       = 1 [(displayName) = "Rive"];
    }

    required string scene                   = 1 [(resource)=true];
    required string default_animation       = 2;
    optional string material                = 3 [(resource)=true, default="/defold-rive/assets/rivemodel.material"];
    optional BlendMode blend_mode           = 4 [default = BLEND_MODE_ALPHA];
    optional string default_state_machine   = 5;
    optional bool create_go_bones           = 6 [default=false];
    optional string artboard                = 7;

    optional CoordinateSystem coordinate_system = 8 [default = COORDINATE_SYSTEM_FULLSCREEN];
    optional Fit artboard_fit                   = 9 [default = FIT_NONE];
    optional Alignment artboard_alignment       = 10 [default = ALIGNMENT_CENTER];

    optional bool auto_play                 = 11 [default = true];   // auto play animation if selected
    optional bool auto_bind                 = 12 [default = true];   // auto bind default view model
}

message RivePlayAnimation
{
    required uint64 animation_id = 1;
    required uint32 playback     = 2; // matches dmGameObject::Playback in gameobject.h
    optional float offset        = 3 [default = 0.0];
    optional float playback_rate = 4 [default = 1.0];
    optional bool is_state_machine = 5 [default = false];
}

message RiveCancelAnimation
{
}

message RiveAnimationDone
{
    required uint64 animation_id = 1;
    required uint32 playback     = 2; // matches dmGameObject::Playback in gameobject.h
}

message RiveEventTrigger
{
    required string name  = 1;
    optional float number = 2;
    optional bool trigger = 3;
    optional string text  = 4;
}

// Function wrapper documented in gamesys_script.cpp
message SetConstantRiveModel
{
    required uint64         name_hash   = 1;
    required dmMath.Vector4 value       = 2;
}

// Function wrapper documented in gamesys_script.cpp
message ResetConstantRiveModel
{
    required uint64         name_hash   = 1;
}
